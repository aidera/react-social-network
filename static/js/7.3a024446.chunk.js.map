{"version":3,"sources":["utils/validators/validators.js","components/common/FormsControls/FormsControls.jsx","components/common/FormsControls/FormsControls.module.sass","components/Login/Login.module.sass","components/Login/Login.jsx","components/Login/LoginContainer.jsx"],"names":["required","value","maxLengthCreator","maxLength","length","Field","input","meta","Element","child","props","hasError","touched","error","className","s","formControl","Textarea","Input","module","exports","maxLength40","LoginForm","React","memo","handleSubmit","onSubmit","component","name","placeholder","validate","type","formSummaryError","LoginReduxForm","reduxForm","form","Login","login","loginPage","formData","password","rememberMe","LoginContainer","this","isAuth","to","PureComponent","mapDispatchToProps","connect","state","getIsAuth"],"mappings":"wHAAA,oEAAO,IAAMA,EAAW,SAAAC,GACpB,IAAGA,EACH,MAAO,qBAIEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAGA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mJCF3BE,EAAQ,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,KAAaC,GAAwB,EAA/BC,MAA+B,EAAxBD,SAAYE,EAAY,kDACpDC,EAAWJ,EAAKK,SAAWL,EAAKM,MACpC,OACI,yBAAKC,UAAWC,IAAEC,YAAc,KAAOL,GAAYI,IAAEF,QACjD,kBAACL,EAAD,iBAAaF,EAAWI,IACxB,6BACCC,GAAY,8BAAOJ,EAAKM,SAKxBI,EAAW,SAACP,GACrB,OAAO,kBAACL,EAAD,iBAAWK,EAAX,CAAkBF,QAAS,eAGzBU,EAAQ,SAACR,GAClB,OAAO,kBAACL,EAAD,iBAAWK,EAAX,CAAkBF,QAAS,a,oBCpBtCW,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,+B,oBCA3ED,EAAOC,QAAU,CAAC,UAAY,yBAAyB,iBAAmB,kC,0JCMtEC,EAAcnB,YAAiB,IAG7BoB,EAAYC,IAAMC,MAAK,YAAsC,IAApCC,EAAmC,EAAnCA,aAAcZ,EAAqB,EAArBA,MAAqB,wCAC9D,OACI,0BAAMa,SAAUD,GACZ,6BACI,kBAACpB,EAAA,EAAD,CACIsB,UAAWT,IACXU,KAAM,QACNC,YAAa,QACbC,SAAU,CAAC9B,IAAUqB,MAG7B,6BACI,kBAAChB,EAAA,EAAD,CACIsB,UAAWT,IACXU,KAAM,WACNC,YAAa,WACbE,KAAM,WACND,SAAU,CAAC9B,IAAUqB,MAG7B,6BACI,kBAAChB,EAAA,EAAD,CACIsB,UAAW,QACXC,KAAM,aACNG,KAAM,aAJd,gBAOA,yBAAKjB,UAAWC,IAAEiB,kBAAmBnB,GACrC,6BACI,4BAAQC,UAAU,UAAlB,cAMVmB,EAAiBC,YAAU,CAC7BC,KAAM,SADaD,CAEpBZ,GAoBYc,EAfD,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAqB,yBAOjC,OACI,yBAAKvB,UAAWC,IAAEuB,WACd,qCACA,kBAACL,EAAD,CAAgBP,SARP,SAACa,GACdF,EAAME,EAASF,MAAME,EAASC,SAASD,EAASE,iB,gCC9ClDC,E,uKAES,IAAD,EACkBC,KAAKjC,MAAtBkC,EADD,EACCA,OAAQP,EADT,EACSA,MAEf,OAAGO,EACQ,kBAAC,IAAD,CAAUC,GAAI,aAGrB,kBAAC,EAAD,CACIR,MAAOA,Q,GAVMd,IAAMuB,eAqB/BC,EAAqB,CACrBV,WAGWW,uBAPO,SAACC,GAAD,MAAY,CAC9BL,OAAQM,YAAUD,MAMiBF,EAAxBC,CAA4CN","file":"static/js/7.3a024446.chunk.js","sourcesContent":["export const required = value => {\r\n    if(value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if(value.length > maxLength) return `Max lenght is ${maxLength} simbols`;\r\n    return undefined;\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport s from './FormsControls.module.sass'\r\n\r\n\r\n\r\nconst Field = ({input, meta, child, Element, ...props})  => {\r\n    let hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError && s.error)}>\r\n            <Element {...input} {...props} />\r\n            <br/>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    return <Field {...props} Element={'textarea'}/>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    return <Field {...props} Element={'input'}/>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2FQCU\",\"error\":\"FormsControls_error__3ILIl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"Login_loginPage__1fEiE\",\"formSummaryError\":\"Login_formSummaryError__1Lkbc\"};","import React from 'react';\r\nimport s from './Login.module.sass'\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\nlet maxLength40 = maxLengthCreator(40);\r\n\r\n\r\nconst LoginForm = React.memo(({handleSubmit, error, ...props}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Input}\r\n                    name={'login'}\r\n                    placeholder={'Login'}\r\n                    validate={[required, maxLength40]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    component={Input}\r\n                    name={'password'}\r\n                    placeholder={'Password'}\r\n                    type={'password'}\r\n                    validate={[required, maxLength40]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field\r\n                    component={\"input\"}\r\n                    name={'rememberMe'}\r\n                    type={'checkbox'}\r\n                /> remember me\r\n            </div>\r\n            <div className={s.formSummaryError}>{error}</div>\r\n            <div>\r\n                <button className='button'>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n});\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n\r\n\r\n\r\nconst Login = ({login, ...props}) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        login(formData.login,formData.password,formData.rememberMe)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={s.loginPage}>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;","import React from \"react\";\r\nimport Login from './Login';\r\nimport {login} from '../../redux/auth-reducer'\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getIsAuth} from \"../../redux/auth-selectors\";\r\n\r\n\r\n\r\nclass LoginContainer extends React.PureComponent {\r\n\r\n    render () {\r\n        const {isAuth, login} = this.props;\r\n\r\n        if(isAuth){\r\n            return <Redirect to={'/profile'}/>\r\n        }\r\n        return(\r\n            <Login\r\n                login={login}\r\n            />\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) =>( {\r\n    isAuth: getIsAuth(state)\r\n});\r\nlet mapDispatchToProps = {\r\n    login\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(LoginContainer);"],"sourceRoot":""}