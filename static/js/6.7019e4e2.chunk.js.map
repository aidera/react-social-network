{"version":3,"sources":["components/common/FormsControls/CustomFormControls.jsx","components/common/PreloaderSmall/PreloaderSmall.jsx","components/common/FormsControls/CustomFormControls.module.sass","components/common/PreloaderSmall/PreloaderSmall.module.sass","components/Dialogs/Dialogs.module.sass","components/Dialogs/Dialog/Dialog.module.sass","components/Dialogs/Message/Message.module.sass","assets/images/send-message_white.svg","assets/images/arrow-left.svg","components/Dialogs/Dialog/Dialog.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","redux/dialogs-selectors.js","components/Dialogs/DialogsContainer.jsx"],"names":["CustomField","label","fieldType","props","useField","field","meta","useEffect","e","document","getElementsByClassName","s","simpleInput","autosize","className","inputBox","htmlFor","id","name","rows","as","checkboxInput","type","checked","value","maxLength","cn","error","length","touched","fieldError","PreloaderSmall","preloader","src","img","alt","module","exports","Dialog","React","memo","userId","user","dialog","to","activeClassName","active","photos","small","fullName","Message","messageText","from","time","opponent","dialogId","opponentName","message","myMessage","messageInnerContainer","messageFrom","timestamp","date","Date","getHours","getMinutes","substr","timeConverter","Dialogs","dialogs","messages","users","sendMessage","currentUser","dialogsScrollTo","getElementById","scrollTo","scrollHeight","onClick","dialogsList","style","left","showDialogsList","arrowBackImg","dialogsContainer","map","usersCopy","newUser","forEach","opponentId","key","messagesList","messageId","initialValues","onSubmit","values","actions","Promise","resolve","reject","now","then","resetForm","catch","setFieldError","formik","sendMessageBlock","placeholder","onKeyDown","shiftKey","preventDefault","handleSubmit","sendImg","noDialogMessage","mapStateToProps","state","isAuth","auth","getMessages","dialogsPage","getDialogs","getUsers","DialogsContainer","Number","match","params","refreshDialogs","setState","getUsersFromDialogs","getUserFromServer","this","PureComponent","compose","connect","withRouter","Component","RedirectComponent"],"mappings":"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","file":"static/js/6.7019e4e2.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\r\nimport s from './CustomFormControls.module.sass'\r\nimport {Field, useField} from \"formik\";\r\nimport cn from 'classnames';\r\nimport autosize from \"autosize\";\r\n\r\n\r\n\r\n/* Templates to FORMIK forms: input[text], textarea, input[checkbox] + labels and errors */\r\n\r\nexport const CustomField = ({ label, fieldType, ...props }) => {\r\n\r\n    const [field, meta] = useField(props);\r\n\r\n    /* Plugin that allows <textarea> increase it's height when user make new lines by typing */\r\n    const textareaResize = (e) => {\r\n        fieldType === 'textarea' && autosize(e)\r\n    }\r\n\r\n    useEffect(() => {\r\n        textareaResize(document.getElementsByClassName(s.simpleInput))\r\n    })\r\n\r\n\r\n    return (\r\n        <div className={s.inputBox}>\r\n\r\n\r\n            {!!label && fieldType !=='checkbox' &&\r\n            <label htmlFor={props.id || props.name}>{label}</label>\r\n            }\r\n\r\n            {fieldType !== 'checkbox' &&\r\n            <Field rows={1} as={fieldType} className={s.simpleInput} {...field} {...props} />\r\n            }\r\n\r\n            {fieldType === 'checkbox' &&\r\n            <div className={s.checkboxInput}>\r\n                <Field type='checkbox' checked={field.value} {...field} {...props} />\r\n                <label htmlFor={props.id || props.name}>{label}</label>\r\n            </div>\r\n            }\r\n\r\n            {!!props.maxLength &&\r\n            <div className={cn(s.maxLength, {[s.error]: field.value.length >= props.maxLength})}>\r\n                {field.value.length}/{props.maxLength}\r\n            </div>\r\n            }\r\n\r\n            {meta.error && meta.touched ? (\r\n                <div className={s.fieldError}>{meta.error}</div>\r\n            ) : null}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './PreloaderSmall.module.sass'\r\nimport img from '../../../assets/images/loader.svg'\r\n\r\nlet PreloaderSmall = () => {\r\n\r\n    return (\r\n        <div className={s.preloader}>\r\n            <img src={img} alt=\"preloader\"/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default PreloaderSmall;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputBox\":\"CustomFormControls_inputBox__2M9DM\",\"simpleInput\":\"CustomFormControls_simpleInput__3R0RT\",\"maxLength\":\"CustomFormControls_maxLength__1jqRO\",\"error\":\"CustomFormControls_error__bVcUE\",\"fieldError\":\"CustomFormControls_fieldError__MVOSL\",\"checkboxInput\":\"CustomFormControls_checkboxInput__xnNWt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"PreloaderSmall_preloader__Yd-fv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__azdOc\",\"showDialogsList\":\"Dialogs_showDialogsList__17vwK\",\"dialogsContainer\":\"Dialogs_dialogsContainer__1N79k\",\"dialogsList\":\"Dialogs_dialogsList__3HEzI\",\"messagesList\":\"Dialogs_messagesList__2HwY3\",\"sendMessageBlock\":\"Dialogs_sendMessageBlock__2OxWB\",\"noDialogMessage\":\"Dialogs_noDialogMessage__MvAt8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__2dEEq\",\"user\":\"Dialog_user__2rFFt\",\"active\":\"Dialog_active__2dkw_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__2LqB3\",\"messageInnerContainer\":\"Message_messageInnerContainer__eXKYE\",\"messageFrom\":\"Message_messageFrom__1V-4M\",\"time\":\"Message_time__Hvkbo\",\"myMessage\":\"Message_myMessage__YwGM2\"};","module.exports = __webpack_public_path__ + \"static/media/send-message_white.147a79aa.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow-left.55da2725.svg\";","import React from 'react';\r\nimport s from './Dialog.module.sass';\r\nimport {NavLink} from 'react-router-dom';\r\nimport PreloaderSmall from \"../../common/PreloaderSmall/PreloaderSmall\";\r\n\r\nconst Dialog = React.memo(({userId, user, ...props}) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={'/dialogs/'+userId} activeClassName={s.active} className={s.user}>\r\n                {!!user &&\r\n                    <>\r\n                        <img src={user.photos && user.photos.small} alt={user.fullName}/>\r\n                        <span>{user.fullName}</span>\r\n                    </>\r\n                }\r\n                {!user &&\r\n                    <PreloaderSmall />\r\n                }\r\n            </NavLink>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport s from './Message.module.sass';\r\nimport cn from 'classnames';\r\n\r\nconst Message = React.memo(({\r\n                                messageText,\r\n                                from,\r\n                                time,\r\n                                dialogId,\r\n                                opponent,\r\n                                ...props}) => {\r\n\r\n\r\n\r\n    const timeConverter = (timestamp) => {\r\n\r\n        // Create a new JavaScript Date object based on the timestamp\r\n        // multiplied by 1000 so that the argument is in milliseconds, not seconds.\r\n        let date = new Date(timestamp);\r\n\r\n        // Hours part from the timestamp\r\n        let hours = date.getHours();\r\n\r\n        // Minutes part from the timestamp\r\n        let minutes = \"0\" + date.getMinutes();\r\n\r\n        // Seconds part from the timestamp\r\n        // let seconds = \"0\" + date.getSeconds();\r\n\r\n        // Will display time in 10:30:23 format\r\n        // let formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n        let formattedTime = hours + ':' + minutes.substr(-2);\r\n\r\n        return formattedTime;\r\n    }\r\n\r\n    let opponentName = 'opponent:';\r\n    if(opponent.fullName) {\r\n        opponentName = opponent.fullName+':';\r\n    }\r\n\r\n    return (\r\n        <div className={cn(s.message, {[s.myMessage]: from==='me'})}>\r\n            <div className={s.messageInnerContainer}>\r\n                <div className={s.messageFrom}>{from === 'me' ? 'me:' : opponentName}</div>\r\n                <div className={s.messageText}>{messageText}</div>\r\n                <div className={s.time}>{timeConverter(time)}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Message;","import React, {useEffect} from 'react';\r\nimport s from './Dialogs.module.sass';\r\nimport Dialog from './Dialog/Dialog';\r\nimport Message from './Message/Message';\r\nimport cn from 'classnames';\r\nimport {CustomField} from \"../common/FormsControls/CustomFormControls\";\r\nimport {Form, Formik} from \"formik\";\r\nimport sendImg from '../../assets/images/send-message_white.svg';\r\nimport arrowBackImg from '../../assets/images/arrow-left.svg';\r\n\r\n\r\nconst Dialogs = React.memo(({\r\n                                dialogs,\r\n                                messages,\r\n                                users,\r\n                                sendMessage,\r\n                                currentUser,\r\n                                ...props\r\n                            }) => {\r\n\r\n\r\n\r\n\r\n    const dialogsScrollTo = () => {\r\n        document.getElementById('dialogsScrollToRef').scrollTo(0,document.getElementById('dialogsScrollToRef').scrollHeight);\r\n    }\r\n\r\n\r\n    const showDialogs = () => {\r\n        document.getElementsByClassName(s.dialogsList)[0].style.left = 0\r\n        document.getElementsByClassName(s.showDialogsList)[0].style.left = '200%'\r\n    }\r\n    const hideDialogs = () => {\r\n        document.getElementsByClassName(s.dialogsList)[0].style.left = '-100%';\r\n        document.getElementsByClassName(s.showDialogsList)[0].style.left = 0\r\n    }\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        dialogsScrollTo()\r\n    })\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div onClick={showDialogs} className={s.showDialogsList}>\r\n                <img src={arrowBackImg} alt=\"show dialogs\"/>\r\n                <span>Show other conversations</span>\r\n            </div>\r\n            <div id={'dialogsScrollToRef'} className={s.dialogsContainer}>\r\n\r\n\r\n                <div onClick={hideDialogs} className={s.dialogsList}>\r\n\r\n                    {dialogs.map(dialog => {\r\n\r\n                        let usersCopy = [...users];\r\n                        let newUser = '';\r\n                        usersCopy.forEach((user) => {\r\n                            if(user.userId === dialog.opponentId){\r\n                                newUser = user;\r\n                            }\r\n                        })\r\n\r\n                        return <Dialog\r\n                            key={dialog.id}\r\n                            user={newUser}\r\n                            userId={dialog.opponentId}\r\n                            currentUser={currentUser}\r\n                        />\r\n\r\n                    })}\r\n\r\n                </div>\r\n                <div className={s.messagesList}>\r\n\r\n                    {messages.map(message => {\r\n\r\n                        if (message.dialogId === currentUser) {\r\n\r\n\r\n\r\n                            let usersCopy = [...users];\r\n                            let newUser = '';\r\n                            usersCopy.forEach((user) => {\r\n                                if(user.userId === currentUser){\r\n                                    newUser = user;\r\n                                }\r\n                            })\r\n\r\n                            return <Message\r\n                                key={message.id}\r\n                                messageId={message.id}\r\n                                opponent={newUser}\r\n                                from={message.from}\r\n                                messageText={message.messageText}\r\n                                dialogId={message.dialogId}\r\n                                time={message.time}\r\n                            />\r\n                        }\r\n                        return null\r\n                    })}\r\n                </div>\r\n                {!!currentUser &&\r\n                <Formik\r\n                    initialValues={{\r\n                        message: ''\r\n                    }}\r\n                    onSubmit={(values, actions, ...props) => {\r\n                        if (values.message.length > 0) {\r\n                            let promise = new Promise((resolve, reject) => {\r\n                                sendMessage(currentUser, values.message, Date.now())\r\n                                dialogsScrollTo();\r\n                                return resolve(null)\r\n                            })\r\n                            promise\r\n                                .then(() => {\r\n                                    actions.resetForm({message: ''})\r\n                                })\r\n                                .catch((error) => {\r\n                                    actions.setFieldError('general', error);\r\n                                })\r\n                        }\r\n\r\n                    }}\r\n                >{formik => {\r\n                    return (\r\n                        <Form className={s.sendMessageBlock}>\r\n                            <CustomField\r\n                                name={'message'}\r\n                                fieldType={'textarea'}\r\n                                placeholder={'Type something besides \"ghbdtn\" ;) '}\r\n                                onKeyDown={(e) => {\r\n                                    if (e.key === 'Enter') {\r\n                                        if (!e.shiftKey) {\r\n                                            e.preventDefault();\r\n                                            formik.handleSubmit()\r\n                                        }\r\n                                    }\r\n                                }}\r\n                            />\r\n                            {/*<ErrorMessage name={'general'}/>*/}\r\n                            <button type={'submit'} className={cn('button', 'button-success')}><img src={sendImg}\r\n                                                                                                    alt=\"send message\"/>\r\n                            </button>\r\n                        </Form>\r\n                    );\r\n                }}\r\n\r\n                </Formik>\r\n                }\r\n                {!currentUser &&\r\n                    <div className={s.noDialogMessage}>\r\n                        <span>Choose user to start conversation</span>\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n/* Use this hoc to pages you want to protect from non-auth users */\r\n\r\nlet mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render () {\r\n\r\n            if(!this.props.isAuth) return <Redirect to='/login'/>\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n\r\n    return ConnectedRedirectComponent;\r\n}","export const getMessages = (state) => {\r\n    return state.dialogsPage.messages;\r\n}\r\n\r\nexport const getDialogs = (state) => {\r\n    return state.dialogsPage.dialogs;\r\n}\r\n\r\nexport const getUsers = (state) => {\r\n    return state.dialogsPage.users;\r\n}","import Dialogs from './Dialogs';\r\nimport React from 'react';\r\nimport {getUserFromServer, sendMessage} from '../../redux/dialogs-reducer'\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {getDialogs, getMessages, getUsers} from \"../../redux/dialogs-selectors\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\n\r\n\r\nclass DialogsContainer extends React.PureComponent{\r\n\r\n\r\n\r\n    state = {\r\n        currentUser: Number(this.props.match.params.userId),\r\n        users: this.props.users\r\n    }\r\n\r\n    /* Checking for userId in URL. If it's not - then use default page */\r\n    refreshDialogs = () => {\r\n        let userId = Number(this.props.match.params.userId);\r\n        this.setState({currentUser: userId})\r\n    }\r\n\r\n    /* We have dialogs arr in our reducer. We need to map each dialog for userId and get him from the server*/\r\n    getUsersFromDialogs = (dialogs) => {\r\n        dialogs.forEach(dialog => {\r\n            if(dialog.opponentId){\r\n                this.props.getUserFromServer(dialog.opponentId);\r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.refreshDialogs();\r\n        this.getUsersFromDialogs(this.props.dialogs)\r\n    }\r\n\r\n    componentDidUpdate () {\r\n        this.refreshDialogs();\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Dialogs\r\n                currentUser={this.state.currentUser}\r\n                dialogs={this.props.dialogs}\r\n                messages={this.props.messages}\r\n                users={this.props.users}\r\n                sendMessage={this.props.sendMessage}\r\n            />\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n/* Dialogs page in progress */\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: getDialogs(state),\r\n        messages: getMessages(state),\r\n        users: getUsers(state)\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,{sendMessage, getUserFromServer}),\r\n    withRouter,\r\n    withAuthRedirect // Protect from non-auth users\r\n)(DialogsContainer);"],"sourceRoot":""}