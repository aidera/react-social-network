{"version":3,"sources":["components/common/FormsControls/CustomFormControls.tsx","components/common/FormsControls/CustomFormControls.module.sass","components/Login/Login.module.sass","components/Login/Login.tsx","components/Login/LoginContainer.tsx"],"names":["CustomField","React","memo","name","label","fieldType","maxLength","placeholder","type","onKeyDown","autoFocus","useField","field","error","touched","textareaRef","useRef","useEffect","current","autosize","inputGroup","htmlFor","as","id","className","s","simpleField","maxLengthCounter","value","length","errorContainer","textareaGroup","rows","ref","checkboxGroup","checkboxInput","checked","fieldError","currentLength","cn","fieldGroup","inputGroupSwitcher","module","exports","Login","login","captchaUrl","isLoading","loginPage","initialValues","password","rememberMe","captcha","general","validationSchema","Yup","required","onSubmit","values","actions","catch","setFieldError","formik","src","alt","errors","formSummaryError","PreloaderSmall","testAccountContainer","rel","target","href","LoginContainer","this","props","isAuth","to","Helmet","PureComponent","mapDispatchToProps","connect","state","getIsAuth","getCaptchaUrl","getIsLoading"],"mappings":"4PAmBaA,EAAyCC,IAAMC,MAAK,YAS1D,IARKC,EAQN,EARMA,KACAC,EAON,EAPMA,MACAC,EAMN,EANMA,UACAC,EAKN,EALMA,UACAC,EAIN,EAJMA,YACAC,EAGN,EAHMA,KACAC,EAEN,EAFMA,UACAC,EACN,EADMA,UACN,EAEgCC,YAASR,GAFzC,mBAEKS,EAFL,YAEaC,EAFb,EAEaA,MAAOC,EAFpB,EAEoBA,QAEhBC,EAAcC,iBAA4B,MAShDC,qBAAU,WACHF,GAAeA,EAAYG,SAC1BC,IAASJ,EAAYG,YAS7B,IAgBME,EAAa,WACf,OACI,sCACOhB,GACC,2BAAOiB,QAAS,QAAQlB,GAAOC,GAGnC,kBAAC,IAAD,eACIkB,GAAG,QACHC,GAAI,QAAQpB,EACZqB,UAAWC,IAAEC,YACbnB,YAAaA,EACbD,UAAWA,EACXE,KAAMA,EACNE,UAAWA,GAEPE,IAGPe,EAAiBf,EAAMgB,MAAMC,OAAQvB,GACrCwB,EAAejB,EAAOC,KAK7BiB,EAAgB,WAClB,OACI,sCACO3B,GACC,2BAAOiB,QAAS,QAAQlB,GAAOC,GAGnC,4CACImB,GAAI,QAAQpB,EACZ6B,KAAM,EACNC,IAAKlB,EACLS,UAAWC,IAAEC,YACbnB,YAAaA,EACbD,UAAWA,EACXG,UAAWA,EACXC,UAAWA,GACPE,IAGPe,EAAiBf,EAAMgB,MAAMC,OAAQvB,GACrCwB,EAAejB,EAAOC,KAK7BoB,EAAgB,WAClB,OACI,oCACI,yBAAKV,UAAWC,IAAEU,eACd,kBAAC,IAAD,eACIZ,GAAI,QAAQpB,EACZK,KAAK,WACL4B,QAASxB,EAAMgB,MACfrB,YAAaA,GACTK,IAER,2BAAOS,QAAS,QAAQlB,GAAOC,IAGlC0B,EAAejB,EAAOC,KAM7BgB,EAAiB,SAACjB,EAAYC,GAChC,GAAGD,GAASC,EACR,OACI,yBAAKU,UAAWC,IAAEY,YAAaxB,IAKrCc,EAAmB,SAACW,EAAuBhC,GAC7C,GAAGA,EACC,OACI,yBAAKkB,UAAWe,IAAGd,IAAEnB,UAAH,eAAgBmB,IAAEZ,MAAQyB,GAAiBhC,KACxDgC,EADL,IACqBhC,IAQjC,OACI,yBAAKkB,UAAWC,IAAEe,YA3GK,WACvB,OAAQnC,GACJ,IAAK,QACD,OAAOe,IAEX,IAAK,WACD,OAAOW,IAEX,IAAK,WACD,OAAOG,IAEX,QACI,OAAOd,KAgGVqB,Q,oBC/JbC,EAAOC,QAAU,CAAC,WAAa,uCAAuC,YAAc,wCAAwC,UAAY,sCAAsC,MAAQ,kCAAkC,WAAa,uCAAuC,cAAgB,4C,oBCA5RD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,WAAa,0BAA0B,iBAAmB,gCAAgC,qBAAuB,sC,kKCmIzJC,EA5GoB3C,IAAMC,MAAK,YAAqC,IAAnC2C,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,UAU/D,OACI,yBAAKvB,UAAWC,IAAEuB,WACd,qCAEA,kBAAC,IAAD,CACIC,cAb0B,CAClCJ,MAAO,GACPK,SAAU,GACVC,YAAY,EACZC,QAAS,GACTC,QAAS,IASDC,iBAAkBC,IAAW,CACzBV,MAAOU,MACFC,SAAS,YACdN,SAAUK,MACLC,SAAS,cAGlBC,SAAU,SAACC,EAAQC,GAWfd,EAAMa,EAAOb,MAAOa,EAAOR,SAAUQ,EAAOP,WAAYO,EAAON,SAC1DQ,OAAM,SAAC/C,GACJ8C,EAAQE,cAAc,UAAWhD,SAI5C,SAAAiD,GACG,OACI,kBAAC,IAAD,KACI,yBAAKtC,UAAWC,IAAEL,YACd,kBAAC,IAAD,CACIf,UAAW,QACXF,KAAM,QACNI,YAAa,WAGrB,yBAAKiB,UAAWC,IAAEL,YACd,kBAAC,IAAD,CACIf,UAAW,QACXF,KAAM,WACNI,YAAa,WACbC,KAAM,cAGd,yBAAKgB,UAAWC,IAAEL,YACd,kBAAC,IAAD,CACIjB,KAAM,aACNC,MAAO,cACPC,UAAW,cAIlByC,GAAc,yBAAKiB,IAAKjB,EAAYkB,IAAI,YACxClB,GACD,yBAAKtB,UAAWC,IAAEL,YACd,kBAAC,IAAD,CACIf,UAAW,QACXF,KAAM,aAKb2D,EAAOG,OAAOZ,QAAU,yBAAK7B,UAAWC,IAAEyC,kBAAmBJ,EAAOG,OAAOZ,SAAiB,KAE7F,8BACMN,GACE,4BAAQvC,KAAM,SAAUgB,UAAWe,IAAG,SAAU,mBAAhD,WAEDQ,GACC,kBAACoB,EAAA,EAAD,WAUxB,yBAAK3C,UAAWC,IAAE2C,sBACd,gEACA,gDACA,oDACA,8CACA,6BACA,uDACA,2BAAG,uBAAGC,IAAI,sBAAsBC,OAAQ,SAAUC,KAAK,yCAApD,+C,wCCzGbC,E,uKAES,IAAD,EACyCC,KAAKC,MAA7CC,EADD,EACCA,OAAQ9B,EADT,EACSA,MAAOC,EADhB,EACgBA,WAAYC,EAD5B,EAC4BA,UAElC,OAAG4B,EACQ,kBAAC,IAAD,CAAUC,GAAI,aAGrB,oCACI,kBAACC,EAAA,EAAD,KACI,yCAEJ,kBAAC,EAAD,CACIhC,MAAOA,EACPC,WAAYA,EACZC,UAAWA,S,GAhBF9C,IAAM6E,eAgC7BC,EAA6C,CAC/ClC,WAKWmC,uBAZS,SAACC,GAAD,MAA0B,CAC9CN,OAAQO,YAAUD,GAClBnC,WAAYqC,YAAcF,GAC1BlC,UAAWqC,YAAaH,MASWF,EAAxBC,CAA4CR","file":"static/js/9.76b99da8.chunk.js","sourcesContent":["import React, {useEffect, useRef} from 'react'\r\nimport s from './CustomFormControls.module.sass'\r\nimport {Field, useField} from \"formik\"\r\nimport cn from 'classnames'\r\nimport autosize from \"autosize\"\r\n\r\n\r\n\r\ntype CustomFieldType = {\r\n    name: string\r\n    fieldType: string\r\n    label?: string\r\n    maxLength?: number\r\n    placeholder?: string\r\n    type?: string\r\n    onKeyDown?: (e: React.KeyboardEvent<HTMLElement>) => void\r\n    autoFocus?: boolean\r\n}\r\n\r\nexport const CustomField: React.FC<CustomFieldType> = React.memo(({\r\n            name,\r\n            label,\r\n            fieldType,\r\n            maxLength,\r\n            placeholder,\r\n            type,\r\n            onKeyDown,\r\n            autoFocus,\r\n}) => {\r\n\r\n    const [field, {error, touched}] = useField(name)\r\n\r\n    const textareaRef = useRef<HTMLTextAreaElement>(null)\r\n\r\n    // const textareaAutosizeTyping = () => {\r\n    //     const target = textareaRef.current\r\n    //     if(target !== null){\r\n    //         autosize(target)\r\n    //     }\r\n    // }\r\n\r\n    useEffect(() => {\r\n        if(textareaRef && textareaRef.current){\r\n            autosize(textareaRef.current)\r\n        }\r\n\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n    const inputGroupSwitcher = () => {\r\n        switch (fieldType) {\r\n            case 'input':\r\n                return inputGroup()\r\n\r\n            case 'textarea':\r\n                return textareaGroup()\r\n\r\n            case 'checkbox':\r\n                return checkboxGroup()\r\n\r\n            default:\r\n                return inputGroup()\r\n        }\r\n    }\r\n\r\n    const inputGroup = () => {\r\n        return (\r\n            <>\r\n                {!!label &&\r\n                    <label htmlFor={'form-'+name}>{label}</label>\r\n                }\r\n\r\n                <Field\r\n                    as='input'\r\n                    id={'form-'+name}\r\n                    className={s.simpleField}\r\n                    placeholder={placeholder}\r\n                    maxLength={maxLength}\r\n                    type={type}\r\n                    autoFocus={autoFocus}\r\n\r\n                    {...field}\r\n                />\r\n\r\n                {maxLengthCounter(field.value.length, maxLength)}\r\n                {errorContainer(error, touched)}\r\n            </>\r\n        )\r\n    }\r\n\r\n    const textareaGroup = () => {\r\n        return (\r\n            <>\r\n                {!!label &&\r\n                    <label htmlFor={'form-'+name}>{label}</label>\r\n                }\r\n\r\n                <textarea\r\n                    id={'form-'+name}\r\n                    rows={1}\r\n                    ref={textareaRef}\r\n                    className={s.simpleField}\r\n                    placeholder={placeholder}\r\n                    maxLength={maxLength}\r\n                    onKeyDown={onKeyDown}\r\n                    autoFocus={autoFocus}\r\n                    {...field}\r\n                />\r\n\r\n                {maxLengthCounter(field.value.length, maxLength)}\r\n                {errorContainer(error, touched)}\r\n            </>\r\n        )\r\n    }\r\n\r\n    const checkboxGroup = () => {\r\n        return (\r\n            <>\r\n                <div className={s.checkboxInput}>\r\n                    <Field\r\n                        id={'form-'+name}\r\n                        type='checkbox'\r\n                        checked={field.value}\r\n                        placeholder={placeholder}\r\n                        {...field}\r\n                    />\r\n                    <label htmlFor={'form-'+name}>{label}</label>\r\n                </div>\r\n\r\n                {errorContainer(error, touched)}\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n    const errorContainer = (error: any, touched: any) => {\r\n        if(error && touched){\r\n            return (\r\n                <div className={s.fieldError}>{error}</div>\r\n            )\r\n        }\r\n    }\r\n\r\n    const maxLengthCounter = (currentLength: number, maxLength: number | undefined) => {\r\n        if(maxLength) {\r\n            return (\r\n                <div className={cn(s.maxLength, {[s.error]: currentLength >= maxLength})}>\r\n                    {currentLength}/{maxLength}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={s.fieldGroup}>\r\n            {inputGroupSwitcher()}\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fieldGroup\":\"CustomFormControls_fieldGroup__3ichb\",\"simpleField\":\"CustomFormControls_simpleField__21tGG\",\"maxLength\":\"CustomFormControls_maxLength__1jqRO\",\"error\":\"CustomFormControls_error__bVcUE\",\"fieldError\":\"CustomFormControls_fieldError__MVOSL\",\"checkboxInput\":\"CustomFormControls_checkboxInput__xnNWt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"Login_loginPage__1fEiE\",\"inputGroup\":\"Login_inputGroup__1d0Qz\",\"formSummaryError\":\"Login_formSummaryError__1Lkbc\",\"testAccountContainer\":\"Login_testAccountContainer__1IMzi\"};","import React from 'react'\r\nimport s from './Login.module.sass'\r\nimport * as Yup from \"yup\"\r\nimport {CustomField} from \"../common/FormsControls/CustomFormControls\"\r\nimport {Form, Formik} from \"formik\"\r\nimport cn from 'classnames'\r\nimport PreloaderSmall from \"../common/PreloaderSmall/PreloaderSmall\"\r\n\r\n\r\n\r\ntype PropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string | null) => any\r\n    captchaUrl: string | null\r\n    isLoading: boolean\r\n}\r\n\r\ntype FormValuesType = {\r\n    login: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string | null\r\n    general: string\r\n}\r\n\r\nconst Login: React.FC<PropsType> = React.memo(({login, captchaUrl, isLoading}) => {\r\n\r\n    const initialValues: FormValuesType = {\r\n        login: '',\r\n        password: '',\r\n        rememberMe: true,\r\n        captcha: '',\r\n        general: ''\r\n    };\r\n\r\n    return (\r\n        <div className={s.loginPage}>\r\n            <h1>Login</h1>\r\n\r\n            <Formik\r\n                initialValues={initialValues}\r\n                validationSchema={Yup.object({\r\n                    login: Yup.string()\r\n                        .required('Required'),\r\n                    password: Yup.string()\r\n                        .required('Required'),\r\n\r\n                })}\r\n                onSubmit={(values, actions) => {\r\n                    // const promise = new Promise(() => {\r\n                    //     return login(values.login, values.password, values.rememberMe, values.captcha)\r\n                    // })\r\n                    // promise\r\n                    //     .then((response) => {\r\n                    //         console.log(response)\r\n                    //     })\r\n                    //     .catch((error)=> {\r\n                    //         actions.setFieldError('general', error)\r\n                    //     })\r\n                    login(values.login, values.password, values.rememberMe, values.captcha)\r\n                        .catch((error: string) => {\r\n                            actions.setFieldError('general', error)\r\n                        })\r\n                }}\r\n            >\r\n                {formik => {\r\n                    return (\r\n                        <Form>\r\n                            <div className={s.inputGroup}>\r\n                                <CustomField\r\n                                    fieldType={'input'}\r\n                                    name={'login'}\r\n                                    placeholder={'Login'}\r\n                                />\r\n                            </div>\r\n                            <div className={s.inputGroup}>\r\n                                <CustomField\r\n                                    fieldType={'input'}\r\n                                    name={'password'}\r\n                                    placeholder={'Password'}\r\n                                    type={'password'}\r\n                                />\r\n                            </div>\r\n                            <div className={s.inputGroup}>\r\n                                <CustomField\r\n                                    name={'rememberMe'}\r\n                                    label={'remember me'}\r\n                                    fieldType={'checkbox'}\r\n                                />\r\n                            </div>\r\n\r\n                            {captchaUrl && <img src={captchaUrl} alt=\"captcha\"/>}\r\n                            {captchaUrl &&\r\n                            <div className={s.inputGroup}>\r\n                                <CustomField\r\n                                    fieldType={'input'}\r\n                                    name={'captcha'}\r\n                                />\r\n                            </div>\r\n                            }\r\n\r\n                            {formik.errors.general ? <div className={s.formSummaryError}>{formik.errors.general}</div> : null}\r\n\r\n                            <div>\r\n                                {!isLoading &&\r\n                                    <button type={'submit'} className={cn('button', 'button-success')}>Login</button>\r\n                                }\r\n                                {!!isLoading &&\r\n                                    <PreloaderSmall />\r\n                                }\r\n                            </div>\r\n                        </Form>\r\n\r\n                    )\r\n                }}\r\n\r\n            </Formik>\r\n\r\n            <div className={s.testAccountContainer}>\r\n                <h2>Hey, looking for a test account?</h2>\r\n                <span>Use this one: </span>\r\n                <i>hope.aidera@gmail.com</i>\r\n                <i>Qn2bGpN_qGxtZKq</i>\r\n                <br/>\r\n                <span>Or create your own in</span>\r\n                <i><a rel=\"noopener noreferrer\" target={'_blank'} href=\"https://social-network.samuraijs.com/\">https://social-network.samuraijs.com/</a></i>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\nexport default Login","import React from \"react\"\r\nimport Login from './Login'\r\nimport {login} from '../../redux/auth-reducer'\r\nimport {connect} from \"react-redux\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport {getIsAuth, getCaptchaUrl, getIsLoading} from \"../../redux/auth-selectors\"\r\nimport {Helmet} from \"react-helmet\"\r\nimport {AppStateType} from \"../../redux/redux-store\"\r\n\r\n\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string | null) => any\r\n}\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass LoginContainer extends React.PureComponent<PropsType> {\r\n\r\n    render () {\r\n        const {isAuth, login, captchaUrl, isLoading} = this.props\r\n\r\n        if(isAuth){\r\n            return <Redirect to={'/profile'}/>\r\n        }\r\n        return(\r\n            <>\r\n                <Helmet>\r\n                    <title>Login</title>\r\n                </Helmet>\r\n                <Login\r\n                    login={login}\r\n                    captchaUrl={captchaUrl}\r\n                    isLoading={isLoading}\r\n                />\r\n            </>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) =>( {\r\n    isAuth: getIsAuth(state),\r\n    captchaUrl: getCaptchaUrl(state),\r\n    isLoading: getIsLoading(state)\r\n})\r\n\r\nconst mapDispatchToProps: MapDispatchToPropsType = {\r\n    login\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(LoginContainer)"],"sourceRoot":""}