{"version":3,"sources":["components/common/FormsControls/CustomFormControls.jsx","components/common/PreloaderSmall/PreloaderSmall.jsx","components/common/FormsControls/CustomFormControls.module.sass","components/common/PreloaderSmall/PreloaderSmall.module.sass","components/Login/Login.module.sass","components/Login/Login.jsx","components/Login/LoginContainer.jsx"],"names":["CustomField","label","fieldType","props","useField","field","meta","useEffect","e","document","getElementsByClassName","s","simpleInput","autosize","className","inputBox","htmlFor","id","name","rows","as","checkboxInput","type","checked","value","maxLength","cn","error","length","touched","fieldError","PreloaderSmall","preloader","src","img","alt","module","exports","Login","React","memo","login","captchaUrl","isLoading","setIsLoading","loginPage","initialValues","password","rememberMe","captcha","validationSchema","Yup","required","onSubmit","values","actions","catch","setFieldError","formik","inputGroup","placeholder","errors","general","formSummaryError","testAccountContainer","rel","target","href","LoginContainer","this","isAuth","to","PureComponent","mapDispatchToProps","connect","state","getIsAuth","getCaptchaUrl","getIsLoading"],"mappings":"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","file":"static/js/7.07d264e2.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\r\nimport s from './CustomFormControls.module.sass'\r\nimport {Field, useField} from \"formik\";\r\nimport cn from 'classnames';\r\nimport autosize from \"autosize\";\r\n\r\n\r\n\r\n\r\nexport const CustomField = ({ label, fieldType, ...props }) => {\r\n    const [field, meta] = useField(props);\r\n\r\n\r\n\r\n    const textareaResize = (e) => {\r\n        fieldType === 'textarea' && autosize(e)\r\n    }\r\n\r\n    useEffect(() => {\r\n        textareaResize(document.getElementsByClassName(s.simpleInput))\r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <div className={s.inputBox}>\r\n\r\n\r\n            {!!label && fieldType !=='checkbox' &&\r\n            <label htmlFor={props.id || props.name}>{label}</label>\r\n            }\r\n\r\n            {fieldType !== 'checkbox' &&\r\n            <Field rows={1} as={fieldType} className={s.simpleInput} {...field} {...props} />\r\n            }\r\n\r\n            {fieldType === 'checkbox' &&\r\n            <div className={s.checkboxInput}>\r\n                <Field type='checkbox' checked={field.value} {...field} {...props} />\r\n                <label htmlFor={props.id || props.name}>{label}</label>\r\n            </div>\r\n            }\r\n\r\n            {!!props.maxLength &&\r\n            <div className={cn(s.maxLength, {[s.error]: field.value.length >= props.maxLength})}>\r\n                {field.value.length}/{props.maxLength}\r\n            </div>\r\n            }\r\n\r\n            {meta.error && meta.touched ? (\r\n                <div className={s.fieldError}>{meta.error}</div>\r\n            ) : null}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n// const Checkbox = ({ children, ...props }) => {\r\n//     // We need to tell useField what type of input this is\r\n//     // since React treats radios and checkboxes differently\r\n//     // than inputs/select/textarea.\r\n//     const [field, meta] = useField({ ...props, type: 'checkbox' });\r\n//     return (\r\n//         <>\r\n//             <label className=\"checkbox\">\r\n//                 <input type=\"checkbox\" {...field} {...props} />\r\n//                 {children}\r\n//             </label>\r\n//             {meta.touched && meta.error ? (\r\n//                 <div className=\"error\">{meta.error}</div>\r\n//             ) : null}\r\n//         </>\r\n//     );\r\n// };","import React from 'react';\r\nimport s from './PreloaderSmall.module.sass'\r\nimport img from '../../../assets/images/loader.svg'\r\n\r\nlet PreloaderSmall = () => {\r\n\r\n    return (\r\n        <div className={s.preloader}>\r\n            <img src={img} alt=\"preloader\"/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default PreloaderSmall;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputBox\":\"CustomFormControls_inputBox__2M9DM\",\"simpleInput\":\"CustomFormControls_simpleInput__3R0RT\",\"maxLength\":\"CustomFormControls_maxLength__1jqRO\",\"error\":\"CustomFormControls_error__bVcUE\",\"fieldError\":\"CustomFormControls_fieldError__MVOSL\",\"checkboxInput\":\"CustomFormControls_checkboxInput__xnNWt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"PreloaderSmall_preloader__Yd-fv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"Login_loginPage__1fEiE\",\"inputGroup\":\"Login_inputGroup__1d0Qz\",\"formSummaryError\":\"Login_formSummaryError__1Lkbc\",\"testAccountContainer\":\"Login_testAccountContainer__1IMzi\"};","import React from 'react';\r\nimport s from './Login.module.sass'\r\nimport * as Yup from \"yup\";\r\nimport {CustomField} from \"../common/FormsControls/CustomFormControls\";\r\nimport {Form, Formik} from \"formik\";\r\nimport cn from 'classnames';\r\nimport PreloaderSmall from \"../common/PreloaderSmall/PreloaderSmall\";\r\n\r\n\r\nconst Login = React.memo(({login, captchaUrl, isLoading, setIsLoading, ...props}) => {\r\n\r\n\r\n    return (\r\n        <div className={s.loginPage}>\r\n            <h1>Login</h1>\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    login: '',\r\n                    password: '',\r\n                    rememberMe: true,\r\n                    captcha: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    login: Yup.string()\r\n                        .required('Required'),\r\n                    password: Yup.string()\r\n                        .required('Required'),\r\n\r\n                })}\r\n                onSubmit={(values, actions) => {\r\n                    login(values.login, values.password, values.rememberMe, values.captcha)\r\n                        .catch(error => {\r\n                            actions.setFieldError('general', error);\r\n                        })\r\n                }}\r\n            >\r\n                {formik => {\r\n                    return (\r\n                        <Form>\r\n                            <div className={s.inputGroup}>\r\n                                <CustomField\r\n                                    fieldType={'input'}\r\n                                    name={'login'}\r\n                                    placeholder={'Login'}\r\n                                />\r\n                            </div>\r\n                            <div className={s.inputGroup}>\r\n                                <CustomField\r\n                                    fieldType={'input'}\r\n                                    name={'password'}\r\n                                    placeholder={'Password'}\r\n                                    type={'password'}\r\n                                />\r\n                            </div>\r\n                            <div className={s.inputGroup}>\r\n                                <CustomField\r\n                                    name={'rememberMe'}\r\n                                    id={'rememberMe'}\r\n                                    label={'remember me'}\r\n                                    fieldType={'checkbox'}\r\n                                />\r\n                            </div>\r\n\r\n                            {captchaUrl && <img src={captchaUrl} alt=\"captcha\"/>}\r\n                            {captchaUrl &&\r\n                            <div className={s.inputGroup}>\r\n                                <CustomField\r\n                                    fieldType={'input'}\r\n                                    name={'captcha'}\r\n                                />\r\n                            </div>\r\n                            }\r\n\r\n                            {formik.errors.general ? <div className={s.formSummaryError}>{formik.errors.general}</div> : null}\r\n\r\n                            <div>\r\n                                {!isLoading &&\r\n                                    <button type={'submit'} className={cn('button', 'button-success')}>Login</button>\r\n                                }\r\n                                {!!isLoading &&\r\n                                    <PreloaderSmall />\r\n                                }\r\n                            </div>\r\n                        </Form>\r\n\r\n                    );\r\n                }}\r\n\r\n\r\n            </Formik>\r\n\r\n            <div className={s.testAccountContainer}>\r\n                <h2>Hey, looking for a test account?</h2>\r\n                <span>Use this one: </span>\r\n                <i>free@samuraijs.com</i>\r\n                <i>free</i>\r\n                <br/>\r\n                <span>Or create your own in</span>\r\n                <i><a rel=\"noopener noreferrer\" target={'_blank'} href=\"https://social-network.samuraijs.com/\">https://social-network.samuraijs.com/</a></i>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Login;","import React from \"react\";\r\nimport Login from './Login';\r\nimport {login, setIsLoading} from '../../redux/auth-reducer'\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getIsAuth, getCaptchaUrl, getIsLoading} from \"../../redux/auth-selectors\";\r\n\r\n\r\n\r\nclass LoginContainer extends React.PureComponent {\r\n\r\n    render () {\r\n        const {isAuth, login, captchaUrl,isLoading} = this.props;\r\n\r\n        if(isAuth){\r\n            return <Redirect to={'/profile'}/>\r\n        }\r\n        return(\r\n            <Login\r\n                login={login}\r\n                captchaUrl={captchaUrl}\r\n                isLoading={isLoading}\r\n            />\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) =>( {\r\n    isAuth: getIsAuth(state),\r\n    captchaUrl: getCaptchaUrl(state),\r\n    isLoading: getIsLoading(state)\r\n});\r\nlet mapDispatchToProps = {\r\n    login,\r\n    setIsLoading\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(LoginContainer);"],"sourceRoot":""}